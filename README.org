* RSA implementation in python3

Usage:

#+begin_src bash
$ ./rsa.py -h
Usage: rsa.py [options]

Simple command line program for RSA encryption

Options:
  -h, --help            show this help message and exit
  -g, --generate-keys   Generate public and private keys optionally specify
                        the size of p and q with --pqsize
  -p PQSIZE, --pqsize=PQSIZE
                        Specify the size of p and q
  -e MESSAGE_FILE, --encrypt=MESSAGE_FILE
                        encrypt message in file
  -d CIPHER_FILE, --decrypt=CIPHER_FILE
                        decrpyt message
  -f FILENAMES, --loadkey/s=FILENAMES
                        Load key files

# Generate
$ ./rsa.py -g -pq 100

Generating keys
----------------------------
SIZE OF r in bits 896
Size of d in bits 896
----------------------------
Generated keys!
Public key stored in key_rsa.pub
Private key stored in key_rsa. Keep this secret!
----------------------------

# Encrypt
$ ./rsa.py -e plaintext.txt -f key_rsa.pub
1253242813841223725143839996550463703312827439534922547873460865467040136136740457990555398728033021862984044133931817201163960990702275215526296127849491960406954455295726274466317005041786465898805172544014245833254723973358441
Generated file cipher.txt

# Decrypt
$ ./rsa.py -d cipher.txt -f key_rsa.pub key_rsa
hello world

# Brute force
$ ./charlie.py -m cipher.txt key_rsa.pub
...
#+end_src

You may need to make the file executable with:
 
#+begin_src bash
chmod +x rsa.py
#+end_src
